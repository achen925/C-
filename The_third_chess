#define  _CRT_SECURE_NO_WARNINGS 1

# include <stdio.h>
# define ROW 3
# define COL 3
# include <stdlib.h>
# include <time.h>

void Init_Board(char board[ROW][COL], int row, int col);
void Display_Board(char board[ROW][COL], int row, int col);
void Player_Move(char board[ROW][COL], int row, int col);
void Computer_Move(char board[ROW][COL], int row, int col);
char is_Win(char board[ROW][COL], int row, int col);

void Init_Board(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}

void Display_Board(char board[ROW][COL], int row, int col)
{
	for (int i = 0; i < row; i++)
	{
		for (int j = 0; j < col; j++)
		{
			//打印每一行的数据
			printf(" %c ", board[i][j]);
			if (j < col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if (i<row-1)
	    {
			for (int k = 0; k < col; k++)
			{
				//打印每一行的数据
				printf("---");
				if (k < col - 1)
				{
					printf("|");
				}
			}
			printf("\n");
	     }
	}
}

void Player_Move(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走:\n");
	while (1)
	{
		printf("请输入坐标:->\n");
		scanf("%d%d", &x, &y);
		if (x<1 || x>row || y<1 || x>row)
		{
			printf("输入坐标非法，请重新输入\n");
			continue;
		}
		else if (board[x-1][y-1]=='#' || board[x-1][y-1]=='*')
		{
			printf("输入坐标已被占用，请重新输入\n");
			continue;
		}
		else
		{
			board[x - 1][y - 1] = '*';
			break;
		}		
	}
		
	
}


void Computer_Move(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑走:->\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
		else
			continue;
	}
}


int is_Full(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j] == ' ')
			{
				return 0;
			}	
		}
	}
	return 1;
}

char is_Win(char board[ROW][COL], int row, int col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
			return board[i][1];
	}
	for (i = 0; i < col; i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
			return board[1][i];
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
		return board[1][1];
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ')
		return board[1][1];
	if (1==is_Full(board, ROW, COL ) )
	{
		return 'Q';
	}
	else
		return 'C';
}

void menu()
{
	printf("****************************************\n");
	printf("********1、开始游戏  0、结束游戏********\n");
	printf("****************************************\n");
}
void game()
{
	char ret = 0;
	char board[ROW][COL] = { 0 };
	Init_Board(board, ROW, COL);
	Display_Board(board, ROW, COL);
	
	while (1)
	{
			Player_Move(board, ROW, COL);
		Display_Board(board, ROW, COL);
		ret = is_Win(board, ROW, COL);
		if (ret != 'C')
		{
			break;
		}
		Computer_Move(board, ROW, COL);
		Display_Board(board, ROW, COL);
		ret = is_Win(board, ROW, COL);
		if (ret != 'C')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢了！\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢了！\n");
	}
	else
		printf("平局！\n");
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("输入错误，请重新输入：\n");
		}
	} 
	while (input);
}

int main()
{
	test();
	return 0;
}

